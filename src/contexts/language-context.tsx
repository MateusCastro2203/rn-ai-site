"use client";

import React, { createContext, useContext, useState, useEffect } from "react";

export type Language = "en" | "pt";

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

// Translations
const translations = {
  en: {
    // Header
    "nav.features": "Features",
    "nav.examples": "Examples",
    "nav.installation": "Installation",
    "nav.github": "GitHub",
    "nav.contact": "Contact",

    // Hero Section
    "hero.title": "Optimize your React Native screens with AI",
    "hero.subtitle":
      "Let RN AI Optimize analyze your screens and suggest performance improvements powered by AI.",
    "hero.viewNpm": "View on NPM",
    "hero.viewGithub": "View on GitHub",

    // Features Section
    "features.title": "Key Features",
    "features.subtitle":
      "Discover how RN AI Optimize can transform your React Native app development",
    "features.analysis.title": "Automatic Performance Analysis",
    "features.analysis.description":
      "Smart and automatic analysis of your React Native screens to identify performance bottlenecks.",
    "features.ai.title": "AI-Powered Suggestions",
    "features.ai.description":
      "Receive personalized optimization suggestions generated by advanced artificial intelligence.",
    "features.cli.title": "Simple CLI Usage",
    "features.cli.description":
      "Intuitive and easy-to-use command line interface. Just one command to get started.",
    "features.feedback.title": "Instant Feedback",
    "features.feedback.description":
      "Get immediate feedback in your terminal with detailed and actionable analyses.",

    // Example Section
    "example.title": "See It in Action",
    "example.subtitle":
      "Example of how RN AI Optimize analyzes your screens and provides detailed suggestions",
    "example.output": `üîç Analyzing React Native screens...

üìÅ Screens found: 5
   ‚Ä¢ LoginScreen.tsx
   ‚Ä¢ HomeScreen.tsx
   ‚Ä¢ ProfileScreen.tsx
   ‚Ä¢ SettingsScreen.tsx
   ‚Ä¢ CartScreen.tsx

ü§ñ AI analysis in progress...

‚úÖ Analysis complete! Suggestions found:

üìä HomeScreen.tsx
   ‚Ä¢ Move FlatList to React.memo() - Savings: ~15ms
   ‚Ä¢ Use getItemLayout for better performance
   ‚Ä¢ Implement optimized keyExtractor

‚ö° ProfileScreen.tsx
   ‚Ä¢ Lazy loading for avatar images
   ‚Ä¢ Memoize statistics components
   ‚Ä¢ Reduce re-renders with useCallback

üéØ Total estimated savings: ~45ms per render
üí° Performance score: 8.5/10 ‚Üí 9.2/10`,

    // Installation Section
    "installation.title": "How to Install",
    "installation.subtitle":
      "Choose the installation method that best fits your workflow",
    "installation.global.title": "Global Installation",
    "installation.global.description": "Install globally to use in any project",
    "installation.global.usage": "Usage:",
    "installation.npx.title": "One-time Use (Recommended)",
    "installation.npx.description": "Run directly without installation",
    "installation.npx.usage": "No prior installation required",
    "installation.recommendation":
      "We recommend using npx to always have the latest version",

    // Footer
    "footer.description":
      "Optimize your React Native applications with the power of artificial intelligence.",
    "footer.links": "Useful Links",
    "footer.npmPackage": "NPM Package",
    "footer.githubRepo": "GitHub Repository",
    "footer.contact": "Contact",
    "footer.quickStart": "Quick Start",
    "footer.quickStartDesc":
      "Run this command in your React Native project directory to get started.",
    "footer.copyright": "¬© 2024 RN AI Optimize. All rights reserved.",
    "footer.madeWith": "Made with",
    "footer.forCommunity": "for the React Native community",
  },
  pt: {
    // Header
    "nav.features": "Funcionalidades",
    "nav.examples": "Exemplos",
    "nav.installation": "Instala√ß√£o",
    "nav.github": "GitHub",
    "nav.contact": "Contato",

    // Hero Section
    "hero.title": "Otimize suas telas React Native com IA",
    "hero.subtitle":
      "Deixe o RN AI Optimize analisar suas telas e sugerir melhorias de performance com intelig√™ncia artificial.",
    "hero.viewNpm": "Ver no NPM",
    "hero.viewGithub": "Ver no GitHub",

    // Features Section
    "features.title": "Funcionalidades Principais",
    "features.subtitle":
      "Descubra como o RN AI Optimize pode transformar o desenvolvimento das suas aplica√ß√µes React Native",
    "features.analysis.title": "An√°lise Autom√°tica de Performance",
    "features.analysis.description":
      "An√°lise inteligente e autom√°tica das suas telas React Native para identificar gargalos de performance.",
    "features.ai.title": "Sugest√µes Powered by IA",
    "features.ai.description":
      "Receba sugest√µes de otimiza√ß√£o personalizadas geradas por intelig√™ncia artificial avan√ßada.",
    "features.cli.title": "Uso Simples via CLI",
    "features.cli.description":
      "Interface de linha de comando intuitiva e f√°cil de usar. Basta um comando para come√ßar.",
    "features.feedback.title": "Feedback Instant√¢neo",
    "features.feedback.description":
      "Obtenha feedback imediato no seu terminal com an√°lises detalhadas e acion√°veis.",

    // Example Section
    "example.title": "Veja em A√ß√£o",
    "example.subtitle":
      "Exemplo de como o RN AI Optimize analisa suas telas e fornece sugest√µes detalhadas",
    "example.output": `üîç Analisando telas React Native...

üìÅ Telas encontradas: 5
   ‚Ä¢ LoginScreen.tsx
   ‚Ä¢ HomeScreen.tsx
   ‚Ä¢ ProfileScreen.tsx
   ‚Ä¢ SettingsScreen.tsx
   ‚Ä¢ CartScreen.tsx

ü§ñ An√°lise de IA em progresso...

‚úÖ An√°lise conclu√≠da! Sugest√µes encontradas:

üìä HomeScreen.tsx
   ‚Ä¢ Mover FlatList para React.memo() - Economia: ~15ms
   ‚Ä¢ Usar getItemLayout para melhor performance
   ‚Ä¢ Implementar keyExtractor otimizado

‚ö° ProfileScreen.tsx
   ‚Ä¢ Lazy loading para imagens de avatar
   ‚Ä¢ Memoizar componentes de estat√≠sticas
   ‚Ä¢ Reduzir re-renders com useCallback

üéØ Economia total estimada: ~45ms por renderiza√ß√£o
üí° Score de performance: 8.5/10 ‚Üí 9.2/10`,

    // Installation Section
    "installation.title": "Como Instalar",
    "installation.subtitle":
      "Escolha o m√©todo de instala√ß√£o que melhor se adapta ao seu fluxo de trabalho",
    "installation.global.title": "Instala√ß√£o Global",
    "installation.global.description":
      "Instale globalmente para usar em qualquer projeto",
    "installation.global.usage": "Uso:",
    "installation.npx.title": "Uso √önico (Recomendado)",
    "installation.npx.description": "Execute diretamente sem instala√ß√£o",
    "installation.npx.usage": "N√£o requer instala√ß√£o pr√©via",
    "installation.recommendation":
      "Recomendamos usar npx para sempre ter a vers√£o mais recente",

    // Footer
    "footer.description":
      "Otimize suas aplica√ß√µes React Native com o poder da intelig√™ncia artificial.",
    "footer.links": "Links √öteis",
    "footer.npmPackage": "Pacote NPM",
    "footer.githubRepo": "Reposit√≥rio GitHub",
    "footer.contact": "Contato",
    "footer.quickStart": "In√≠cio R√°pido",
    "footer.quickStartDesc":
      "Execute este comando no diret√≥rio do seu projeto React Native para come√ßar.",
    "footer.copyright": "¬© 2024 RN AI Optimize. Todos os direitos reservados.",
    "footer.madeWith": "Feito com",
    "footer.forCommunity": "para a comunidade React Native",
  },
};

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguage] = useState<Language>("en"); // English as default

  // Load language from localStorage on mount
  useEffect(() => {
    const savedLanguage = localStorage.getItem("language") as Language;
    if (savedLanguage && (savedLanguage === "en" || savedLanguage === "pt")) {
      setLanguage(savedLanguage);
    }
  }, []);

  // Save language to localStorage when changed
  useEffect(() => {
    localStorage.setItem("language", language);
  }, [language]);

  const t = (key: string): string => {
    return (
      translations[language][
        key as keyof (typeof translations)[typeof language]
      ] || key
    );
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
}
